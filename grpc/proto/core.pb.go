// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/core.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GitCloneRequest struct {
	ApplicationName      string   `protobuf:"bytes,1,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	JobDir               string   `protobuf:"bytes,2,opt,name=jobDir,proto3" json:"jobDir,omitempty"`
	Repository           string   `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitCloneRequest) Reset()         { *m = GitCloneRequest{} }
func (m *GitCloneRequest) String() string { return proto.CompactTextString(m) }
func (*GitCloneRequest) ProtoMessage()    {}
func (*GitCloneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4b0acae2797acdd, []int{0}
}

func (m *GitCloneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitCloneRequest.Unmarshal(m, b)
}
func (m *GitCloneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitCloneRequest.Marshal(b, m, deterministic)
}
func (m *GitCloneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitCloneRequest.Merge(m, src)
}
func (m *GitCloneRequest) XXX_Size() int {
	return xxx_messageInfo_GitCloneRequest.Size(m)
}
func (m *GitCloneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GitCloneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GitCloneRequest proto.InternalMessageInfo

func (m *GitCloneRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *GitCloneRequest) GetJobDir() string {
	if m != nil {
		return m.JobDir
	}
	return ""
}

func (m *GitCloneRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

type ExecuteCommandsRequest struct {
	ApplicationName      string   `protobuf:"bytes,1,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	JobDir               string   `protobuf:"bytes,2,opt,name=jobDir,proto3" json:"jobDir,omitempty"`
	Commands             []string `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteCommandsRequest) Reset()         { *m = ExecuteCommandsRequest{} }
func (m *ExecuteCommandsRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteCommandsRequest) ProtoMessage()    {}
func (*ExecuteCommandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4b0acae2797acdd, []int{1}
}

func (m *ExecuteCommandsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteCommandsRequest.Unmarshal(m, b)
}
func (m *ExecuteCommandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteCommandsRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteCommandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteCommandsRequest.Merge(m, src)
}
func (m *ExecuteCommandsRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteCommandsRequest.Size(m)
}
func (m *ExecuteCommandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteCommandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteCommandsRequest proto.InternalMessageInfo

func (m *ExecuteCommandsRequest) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *ExecuteCommandsRequest) GetJobDir() string {
	if m != nil {
		return m.JobDir
	}
	return ""
}

func (m *ExecuteCommandsRequest) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func init() {
	proto.RegisterType((*GitCloneRequest)(nil), "proto.GitCloneRequest")
	proto.RegisterType((*ExecuteCommandsRequest)(nil), "proto.ExecuteCommandsRequest")
}

func init() { proto.RegisterFile("proto/core.proto", fileDescriptor_a4b0acae2797acdd) }

var fileDescriptor_a4b0acae2797acdd = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x90, 0xc1, 0x4e, 0x84, 0x30,
	0x10, 0x86, 0x83, 0xc4, 0xcd, 0x32, 0x17, 0xcc, 0x1c, 0x08, 0xc1, 0x68, 0x36, 0x7b, 0xe2, 0x54,
	0x12, 0xbd, 0x79, 0xc5, 0x8d, 0xc6, 0x83, 0x07, 0xde, 0x00, 0xea, 0xb8, 0xa9, 0x01, 0xa6, 0xb6,
	0xc5, 0xc8, 0x63, 0xf8, 0xc6, 0xc6, 0x02, 0xc6, 0x10, 0xbd, 0x79, 0x6a, 0xbf, 0xe9, 0xe4, 0x6f,
	0xfe, 0x0f, 0xce, 0xb4, 0x61, 0xc7, 0x85, 0x64, 0x43, 0xc2, 0x5f, 0xf1, 0xd4, 0x1f, 0xd9, 0xf9,
	0x91, 0xf9, 0xd8, 0x52, 0xe1, 0xa9, 0x19, 0x9e, 0x0b, 0xea, 0xb4, 0x1b, 0xa7, 0x9d, 0xbd, 0x85,
	0xf8, 0x4e, 0xb9, 0xb2, 0xe5, 0x9e, 0x2a, 0x7a, 0x1d, 0xc8, 0x3a, 0xcc, 0x21, 0xae, 0xb5, 0x6e,
	0x95, 0xac, 0x9d, 0xe2, 0xfe, 0xb1, 0xee, 0x28, 0x0d, 0x76, 0x41, 0x1e, 0x55, 0xeb, 0x31, 0x26,
	0xb0, 0x79, 0xe1, 0xe6, 0x56, 0x99, 0xf4, 0xc4, 0x2f, 0xcc, 0x84, 0x97, 0x00, 0x86, 0x34, 0x5b,
	0xe5, 0xd8, 0x8c, 0x69, 0xe8, 0xdf, 0x7e, 0x4c, 0xf6, 0x6f, 0x90, 0x1c, 0xde, 0x49, 0x0e, 0x8e,
	0x4a, 0xee, 0xba, 0xba, 0x7f, 0xb2, 0xff, 0xf7, 0x77, 0x06, 0x5b, 0x39, 0x87, 0xa6, 0xe1, 0x2e,
	0xcc, 0xa3, 0xea, 0x9b, 0xaf, 0x3e, 0x02, 0x88, 0x1e, 0x78, 0x94, 0xaa, 0x64, 0x43, 0x78, 0x03,
	0xdb, 0xa5, 0x3a, 0x26, 0x93, 0x0e, 0xb1, 0x72, 0x91, 0x25, 0x62, 0x92, 0x27, 0x16, 0x79, 0xe2,
	0xf0, 0x25, 0x0f, 0xef, 0x21, 0x5e, 0x35, 0xc0, 0x8b, 0x39, 0xe2, 0xf7, 0x66, 0x7f, 0x25, 0x35,
	0x1b, 0xcf, 0xd7, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xc0, 0xad, 0xe8, 0xbf, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JoyciCoreClient is the client API for JoyciCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JoyciCoreClient interface {
	GitClone(ctx context.Context, in *GitCloneRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ExecuteCommands(ctx context.Context, in *ExecuteCommandsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type joyciCoreClient struct {
	cc *grpc.ClientConn
}

func NewJoyciCoreClient(cc *grpc.ClientConn) JoyciCoreClient {
	return &joyciCoreClient{cc}
}

func (c *joyciCoreClient) GitClone(ctx context.Context, in *GitCloneRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.JoyciCore/GitClone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joyciCoreClient) ExecuteCommands(ctx context.Context, in *ExecuteCommandsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.JoyciCore/ExecuteCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoyciCoreServer is the server API for JoyciCore service.
type JoyciCoreServer interface {
	GitClone(context.Context, *GitCloneRequest) (*empty.Empty, error)
	ExecuteCommands(context.Context, *ExecuteCommandsRequest) (*empty.Empty, error)
}

// UnimplementedJoyciCoreServer can be embedded to have forward compatible implementations.
type UnimplementedJoyciCoreServer struct {
}

func (*UnimplementedJoyciCoreServer) GitClone(ctx context.Context, req *GitCloneRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GitClone not implemented")
}
func (*UnimplementedJoyciCoreServer) ExecuteCommands(ctx context.Context, req *ExecuteCommandsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommands not implemented")
}

func RegisterJoyciCoreServer(s *grpc.Server, srv JoyciCoreServer) {
	s.RegisterService(&_JoyciCore_serviceDesc, srv)
}

func _JoyciCore_GitClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoyciCoreServer).GitClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JoyciCore/GitClone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoyciCoreServer).GitClone(ctx, req.(*GitCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoyciCore_ExecuteCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoyciCoreServer).ExecuteCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JoyciCore/ExecuteCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoyciCoreServer).ExecuteCommands(ctx, req.(*ExecuteCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JoyciCore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JoyciCore",
	HandlerType: (*JoyciCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GitClone",
			Handler:    _JoyciCore_GitClone_Handler,
		},
		{
			MethodName: "ExecuteCommands",
			Handler:    _JoyciCore_ExecuteCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/core.proto",
}
